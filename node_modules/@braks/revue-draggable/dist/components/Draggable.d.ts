import type { PropType } from 'vue-demi';
import type { DraggableOptions } from '../utils/types';
declare const Draggable: import("vue-demi").DefineComponent<{
    axis: {
        type: PropType<DraggableOptions["axis"]>;
        default: string;
    };
    bounds: {
        type: PropType<DraggableOptions["bounds"]>;
        default: boolean;
    };
    defaultClassName: {
        type: PropType<DraggableOptions["defaultClassName"]>;
        default: string;
    };
    defaultClassNameDragging: {
        type: PropType<DraggableOptions["defaultClassNameDragging"]>;
        default: string;
    };
    defaultClassNameDragged: {
        type: PropType<DraggableOptions["defaultClassNameDragged"]>;
        default: string;
    };
    defaultPosition: {
        type: PropType<DraggableOptions["defaultPosition"]>;
        default: () => {
            x: number;
            y: number;
        };
    };
    scale: {
        type: PropType<DraggableOptions["scale"]>;
        default: number;
    };
    position: {
        type: PropType<DraggableOptions["position"]>;
        default: undefined;
    };
    positionOffset: {
        type: PropType<DraggableOptions["positionOffset"]>;
        default: undefined;
    };
    allowAnyClick: {
        type: PropType<DraggableOptions["allowAnyClick"]>;
        default: boolean;
    };
    disabled: {
        type: PropType<DraggableOptions["disabled"]>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<DraggableOptions["enableUserSelectHack"]>;
        default: boolean;
    };
    enableTransformFix: {
        type: PropType<DraggableOptions["enableTransformFix"]>;
        default: boolean;
    };
    cancel: {
        type: PropType<DraggableOptions["cancel"]>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<DraggableOptions["offsetParent"]>;
        default: () => void;
    };
    grid: {
        type: PropType<DraggableOptions["grid"]>;
        default: undefined;
    };
    handle: {
        type: PropType<DraggableOptions["handle"]>;
        default: undefined;
    };
    update: {
        type: PropType<DraggableOptions["update"]>;
        default: boolean;
    };
    start: {
        type: PropType<DraggableOptions["start"]>;
        default: () => void;
    };
    move: {
        type: PropType<DraggableOptions["move"]>;
        default: () => void;
    };
    stop: {
        type: PropType<DraggableOptions["stop"]>;
        default: () => void;
    };
    mouseDown: {
        type: PropType<DraggableOptions["mouseDown"]>;
        default: () => void;
    };
}, () => import("vue-demi").VNode<import("vue-demi").RendererNode, import("vue-demi").RendererElement, {
    [key: string]: any;
}> | undefined, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, ("start" | "move" | "stop" | "transformed")[], "start" | "move" | "stop" | "transformed", import("vue-demi").PublicProps, Readonly<import("vue-demi").ExtractPropTypes<{
    axis: {
        type: PropType<DraggableOptions["axis"]>;
        default: string;
    };
    bounds: {
        type: PropType<DraggableOptions["bounds"]>;
        default: boolean;
    };
    defaultClassName: {
        type: PropType<DraggableOptions["defaultClassName"]>;
        default: string;
    };
    defaultClassNameDragging: {
        type: PropType<DraggableOptions["defaultClassNameDragging"]>;
        default: string;
    };
    defaultClassNameDragged: {
        type: PropType<DraggableOptions["defaultClassNameDragged"]>;
        default: string;
    };
    defaultPosition: {
        type: PropType<DraggableOptions["defaultPosition"]>;
        default: () => {
            x: number;
            y: number;
        };
    };
    scale: {
        type: PropType<DraggableOptions["scale"]>;
        default: number;
    };
    position: {
        type: PropType<DraggableOptions["position"]>;
        default: undefined;
    };
    positionOffset: {
        type: PropType<DraggableOptions["positionOffset"]>;
        default: undefined;
    };
    allowAnyClick: {
        type: PropType<DraggableOptions["allowAnyClick"]>;
        default: boolean;
    };
    disabled: {
        type: PropType<DraggableOptions["disabled"]>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<DraggableOptions["enableUserSelectHack"]>;
        default: boolean;
    };
    enableTransformFix: {
        type: PropType<DraggableOptions["enableTransformFix"]>;
        default: boolean;
    };
    cancel: {
        type: PropType<DraggableOptions["cancel"]>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<DraggableOptions["offsetParent"]>;
        default: () => void;
    };
    grid: {
        type: PropType<DraggableOptions["grid"]>;
        default: undefined;
    };
    handle: {
        type: PropType<DraggableOptions["handle"]>;
        default: undefined;
    };
    update: {
        type: PropType<DraggableOptions["update"]>;
        default: boolean;
    };
    start: {
        type: PropType<DraggableOptions["start"]>;
        default: () => void;
    };
    move: {
        type: PropType<DraggableOptions["move"]>;
        default: () => void;
    };
    stop: {
        type: PropType<DraggableOptions["stop"]>;
        default: () => void;
    };
    mouseDown: {
        type: PropType<DraggableOptions["mouseDown"]>;
        default: () => void;
    };
}>> & {
    onTransformed?: ((...args: any[]) => any) | undefined;
    onStart?: ((...args: any[]) => any) | undefined;
    onMove?: ((...args: any[]) => any) | undefined;
    onStop?: ((...args: any[]) => any) | undefined;
}, {
    axis: "both" | "x" | "y" | "none";
    bounds: string | false | import("../utils/types").DraggableBounds;
    enableTransformFix: boolean | {
        position: "relative" | "absolute";
    };
    defaultClassName: string;
    defaultClassNameDragging: string;
    defaultClassNameDragged: string;
    defaultPosition: import("../utils/types").ControlPosition;
    positionOffset: import("../utils/types").PositionOffsetControlPosition | undefined;
    position: import("../utils/types").ControlPosition | undefined;
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    update: boolean;
    offsetParent: HTMLElement | undefined;
    grid: [number, number] | undefined;
    handle: string;
    cancel: string;
    scale: number;
    start: import("../utils/types").DraggableEventHandler;
    move: import("../utils/types").DraggableEventHandler;
    stop: import("../utils/types").DraggableEventHandler;
    mouseDown: (e: import("../utils/types").MouseTouchEvent) => void;
}, {}>;
export default Draggable;
