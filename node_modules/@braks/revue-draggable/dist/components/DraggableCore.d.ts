import type { PropType } from 'vue-demi';
import type { DraggableCoreOptions } from '../utils/types';
declare const DraggableCore: import("vue-demi").DefineComponent<{
    scale: {
        type: PropType<DraggableCoreOptions["scale"]>;
        default: number;
    };
    allowAnyClick: {
        type: PropType<DraggableCoreOptions["allowAnyClick"]>;
        default: boolean;
    };
    disabled: {
        type: PropType<DraggableCoreOptions["disabled"]>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<DraggableCoreOptions["enableUserSelectHack"]>;
        default: boolean;
    };
    cancel: {
        type: PropType<DraggableCoreOptions["cancel"]>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<DraggableCoreOptions["offsetParent"]>;
        default: undefined;
    };
    grid: {
        type: PropType<DraggableCoreOptions["grid"]>;
        default: undefined;
    };
    handle: {
        type: PropType<DraggableCoreOptions["handle"]>;
        default: undefined;
    };
    onStart: {
        type: PropType<DraggableCoreOptions["start"]>;
        default: () => void;
    };
    onMove: {
        type: PropType<DraggableCoreOptions["move"]>;
        default: () => void;
    };
    onStop: {
        type: PropType<DraggableCoreOptions["stop"]>;
        default: () => void;
    };
    onMouseDown: {
        type: PropType<DraggableCoreOptions["mouseDown"]>;
        default: () => void;
    };
}, () => import("vue-demi").VNode<import("vue-demi").RendererNode, import("vue-demi").RendererElement, {
    [key: string]: any;
}> | undefined, unknown, {}, {}, import("vue-demi").ComponentOptionsMixin, import("vue-demi").ComponentOptionsMixin, ("start" | "move" | "stop")[], "start" | "move" | "stop", import("vue-demi").PublicProps, Readonly<import("vue-demi").ExtractPropTypes<{
    scale: {
        type: PropType<DraggableCoreOptions["scale"]>;
        default: number;
    };
    allowAnyClick: {
        type: PropType<DraggableCoreOptions["allowAnyClick"]>;
        default: boolean;
    };
    disabled: {
        type: PropType<DraggableCoreOptions["disabled"]>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<DraggableCoreOptions["enableUserSelectHack"]>;
        default: boolean;
    };
    cancel: {
        type: PropType<DraggableCoreOptions["cancel"]>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<DraggableCoreOptions["offsetParent"]>;
        default: undefined;
    };
    grid: {
        type: PropType<DraggableCoreOptions["grid"]>;
        default: undefined;
    };
    handle: {
        type: PropType<DraggableCoreOptions["handle"]>;
        default: undefined;
    };
    onStart: {
        type: PropType<DraggableCoreOptions["start"]>;
        default: () => void;
    };
    onMove: {
        type: PropType<DraggableCoreOptions["move"]>;
        default: () => void;
    };
    onStop: {
        type: PropType<DraggableCoreOptions["stop"]>;
        default: () => void;
    };
    onMouseDown: {
        type: PropType<DraggableCoreOptions["mouseDown"]>;
        default: () => void;
    };
}>> & {
    onStart?: ((...args: any[]) => any) | undefined;
    onMove?: ((...args: any[]) => any) | undefined;
    onStop?: ((...args: any[]) => any) | undefined;
}, {
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    offsetParent: HTMLElement | undefined;
    grid: [number, number] | undefined;
    handle: string;
    cancel: string;
    scale: number;
    onStart: import("../utils/types").DraggableEventHandler;
    onMove: import("../utils/types").DraggableEventHandler;
    onStop: import("../utils/types").DraggableEventHandler;
    onMouseDown: (e: import("../utils/types").MouseTouchEvent) => void;
}, {}>;
export default DraggableCore;
