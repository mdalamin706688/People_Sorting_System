import type { ControlPosition, EventHandler, MouseTouchEvent, PositionOffsetControlPosition } from './types';
export declare function matchesSelector(el: Node, selector: string): boolean;
export declare function matchesSelectorAndParentsTo(el: Node, selector: string, baseNode: Node): boolean;
export declare function addEvent(el: Node, event: string, handler: EventHandler<MouseTouchEvent>, inputOptions?: Record<string, any>): void;
export declare function removeEvent(el: Node, event: string, handler: EventHandler<MouseTouchEvent>, inputOptions?: Record<string, any>): void;
export declare function outerHeight(node: HTMLElement | SVGElement): number;
export declare function outerWidth(node: HTMLElement | SVGElement): number;
export declare function getTouch(e: TouchEvent, identifier: number): {
    clientX: number;
    clientY: number;
};
export declare function getTouchIdentifier(e: MouseTouchEvent): number | undefined;
export declare function innerHeight(node: HTMLElement): number;
export declare function innerWidth(node: HTMLElement): number;
export declare function offsetXYFromParent(evt: {
    clientX: number;
    clientY: number;
}, offsetParent: Element, scale: number): ControlPosition;
export declare function createCSSTransform(controlPos: ControlPosition, positionOffset?: PositionOffsetControlPosition): Record<string, string>;
export declare function createSVGTransform(controlPos: ControlPosition, positionOffset?: PositionOffsetControlPosition): string;
export declare function getTranslation({ x, y }: ControlPosition, unitSuffix?: string, positionOffset?: PositionOffsetControlPosition): string;
export declare function addUserSelectStyles(doc: Document): void;
export declare function removeUserSelectStyles(doc: Document): void;
export declare function addClassName(el: HTMLElement, className: string): void;
export declare function removeClassName(el: HTMLElement, className: string): void;
